generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Event {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  location   String
  start_date DateTime
  end_date   DateTime
  closed     Boolean  @default(false)
  contest    Contest[]
  ticket     Ticket[]
}

model Contest {
  id          Int      @id @default(autoincrement())
  event_id    Int
  number      Int
  closed      Boolean  @default(false)
  event       Event    @relation(fields: [event_id], references: [id])
  horse       Horse[]  @relation("ContestToHorse") // This relation needs a name for the cacade delete
  ticket      Ticket[]

  @@unique([event_id, number])
}

model Horse {
  id          Int      @id @default(autoincrement())
  contest_id  Int
  number      Int
  winner      Boolean @default(false)
  scratch     Boolean @default(false)
  contest     Contest @relation("ContestToHorse", fields: [contest_id], references: [id], onDelete: Cascade)
  ticket      Ticket[]

  @@unique([contest_id, number])
}

model Order {
  id            Int       @id @default(autoincrement())
  created_dttm  DateTime  @default(now())
  status        String
  ticket        Ticket[]
}

model Role {
  id            Int     @id @default(autoincrement())
  name          String  @unique
  users         User[]  @relation("UserToRole")
}

model Ticket {
  id            Int     @id @default(autoincrement())
  event_id      Int
  contest_id    Int
  horse_id      Int
  order_id      Int
  horse         Horse   @relation(fields: [horse_id], references: [id])
  contest       Contest @relation(fields: [contest_id], references: [id])
  event         Event   @relation(fields: [event_id], references: [id])
  order         Order   @relation(fields: [order_id], references: [id])

  @@index([event_id], map: "idx_ticket_event")
}

model User {
  id            Int     @id @default(autoincrement())
  username      String  @unique
  password      String?
  email         String  @unique
  verified      Boolean @default(false)
  verificationTokenId String?
  roles         Role[]  @relation("UserToRole")
}